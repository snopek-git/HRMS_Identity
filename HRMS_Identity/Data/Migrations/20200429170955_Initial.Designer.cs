// <auto-generated />
using System;
using HRMS_Identity.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HRMS_Identity.Migrations
{
    [DbContext(typeof(s15153Context))]
    [Migration("20200429170955_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HRMS_Identity.Models.AbsenceType", b =>
                {
                    b.Property<int>("IdAbsenceType");

                    b.Property<string>("AbsenceType1")
                        .IsRequired()
                        .HasColumnName("AbsenceType")
                        .HasMaxLength(100);

                    b.HasKey("IdAbsenceType")
                        .HasName("AbsenceType_pk");

                    b.ToTable("AbsenceType");
                });

            modelBuilder.Entity("HRMS_Identity.Models.AvailableAbsence", b =>
                {
                    b.Property<int>("IdAvailableAbsence");

                    b.Property<decimal>("AvailableDays")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int>("IdAbsenceType");

                    b.Property<int>("IdEmployee");

                    b.Property<decimal>("UsedAbsence")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("IdAvailableAbsence")
                        .HasName("AvailableAbsence_pk");

                    b.HasIndex("IdAbsenceType");

                    b.HasIndex("IdEmployee");

                    b.ToTable("AvailableAbsence");
                });

            modelBuilder.Entity("HRMS_Identity.Models.Benefit", b =>
                {
                    b.Property<int>("IdBenefit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6, 2)");

                    b.HasKey("IdBenefit")
                        .HasName("Benefit_pk");

                    b.ToTable("Benefit");
                });

            modelBuilder.Entity("HRMS_Identity.Models.Contract", b =>
                {
                    b.Property<int>("IdContract");

                    b.Property<DateTime>("ContractEnd")
                        .HasColumnType("date");

                    b.Property<int>("ContractNumber");

                    b.Property<DateTime>("ContractStart")
                        .HasColumnType("date");

                    b.Property<int>("IdContractStatus");

                    b.Property<int>("IdContractType");

                    b.Property<int>("IdEmployee");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("IdContract")
                        .HasName("Contract_pk");

                    b.HasIndex("IdContractStatus");

                    b.HasIndex("IdContractType");

                    b.HasIndex("IdEmployee");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("HRMS_Identity.Models.ContractBenefit", b =>
                {
                    b.Property<int>("IdBenefitContract");

                    b.Property<int>("IdBenefit");

                    b.Property<int>("IdContract");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("IdBenefitContract", "IdBenefit", "IdContract")
                        .HasName("ContractBenefit_pk");

                    b.HasIndex("IdBenefit");

                    b.HasIndex("IdContract");

                    b.ToTable("ContractBenefit");
                });

            modelBuilder.Entity("HRMS_Identity.Models.ContractStatus", b =>
                {
                    b.Property<int>("IdContractStatus");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IdContractStatus")
                        .HasName("ContractStatus_pk");

                    b.ToTable("ContractStatus");
                });

            modelBuilder.Entity("HRMS_Identity.Models.ContractType", b =>
                {
                    b.Property<int>("IdContractType");

                    b.Property<string>("ContractType1")
                        .IsRequired()
                        .HasColumnName("ContractType")
                        .HasMaxLength(100);

                    b.HasKey("IdContractType")
                        .HasName("ContractType_pk");

                    b.ToTable("ContractType");
                });

            modelBuilder.Entity("HRMS_Identity.Models.Employee", b =>
                {
                    b.Property<int>("IdEmployee");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("IdCardNumber")
                        .HasMaxLength(6);

                    b.Property<int>("IdJob");

                    b.Property<int?>("IdManager");

                    b.Property<int>("IdRole");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(9);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasColumnName("PESEL")
                        .HasMaxLength(11);

                    b.Property<int?>("PhoneNumber");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50);

                    b.HasKey("IdEmployee")
                        .HasName("Employee_pk");

                    b.HasIndex("IdJob");

                    b.HasIndex("IdManager");

                    b.HasIndex("IdRole");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("HRMS_Identity.Models.Job", b =>
                {
                    b.Property<int>("IdJob");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IdJob")
                        .HasName("Job_pk");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("HRMS_Identity.Models.Overtime", b =>
                {
                    b.Property<int>("IdOvertime");

                    b.Property<decimal>("Hours")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<int>("IdEmployee");

                    b.Property<DateTime>("ToBeSettledBefore")
                        .HasColumnType("date");

                    b.HasKey("IdOvertime")
                        .HasName("Overtime_pk");

                    b.HasIndex("IdEmployee");

                    b.ToTable("Overtime");
                });

            modelBuilder.Entity("HRMS_Identity.Models.Request", b =>
                {
                    b.Property<int>("IdRequest");

                    b.Property<string>("CommentEmployee");

                    b.Property<string>("CommentManager");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IdEmployee");

                    b.Property<int>("IdRequestStatus");

                    b.Property<int>("IdRequestType");

                    b.Property<decimal>("QuantityRequested")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("IdRequest")
                        .HasName("Request_pk");

                    b.HasIndex("IdEmployee");

                    b.HasIndex("IdRequestStatus");

                    b.HasIndex("IdRequestType");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("HRMS_Identity.Models.RequestStatus", b =>
                {
                    b.Property<int>("IdRequestStatus");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IdRequestStatus")
                        .HasName("RequestStatus_pk");

                    b.ToTable("RequestStatus");
                });

            modelBuilder.Entity("HRMS_Identity.Models.RequestType", b =>
                {
                    b.Property<int>("IdRequestType");

                    b.Property<string>("Object")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IdRequestType")
                        .HasName("RequestType_pk");

                    b.ToTable("RequestType");
                });

            modelBuilder.Entity("HRMS_Identity.Models.Role", b =>
                {
                    b.Property<int>("IdRole");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IdRole")
                        .HasName("Role_pk");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("HRMS_Identity.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("IdEmployee");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HRMS_Identity.Models.AvailableAbsence", b =>
                {
                    b.HasOne("HRMS_Identity.Models.AbsenceType", "IdAbsenceTypeNavigation")
                        .WithMany("AvailableAbsence")
                        .HasForeignKey("IdAbsenceType")
                        .HasConstraintName("AvailableAbsence_AbsenceType");

                    b.HasOne("HRMS_Identity.Models.Employee", "IdEmployeeNavigation")
                        .WithMany("AvailableAbsence")
                        .HasForeignKey("IdEmployee")
                        .HasConstraintName("AvailableAbsence_Employee");
                });

            modelBuilder.Entity("HRMS_Identity.Models.Contract", b =>
                {
                    b.HasOne("HRMS_Identity.Models.ContractStatus", "IdContractStatusNavigation")
                        .WithMany("Contract")
                        .HasForeignKey("IdContractStatus")
                        .HasConstraintName("Contract_ContractStatus");

                    b.HasOne("HRMS_Identity.Models.ContractType", "IdContractTypeNavigation")
                        .WithMany("Contract")
                        .HasForeignKey("IdContractType")
                        .HasConstraintName("Contract_ContractType");

                    b.HasOne("HRMS_Identity.Models.Employee", "IdEmployeeNavigation")
                        .WithMany("Contract")
                        .HasForeignKey("IdEmployee")
                        .HasConstraintName("Contract_Employee");
                });

            modelBuilder.Entity("HRMS_Identity.Models.ContractBenefit", b =>
                {
                    b.HasOne("HRMS_Identity.Models.Benefit", "IdBenefitNavigation")
                        .WithMany("ContractBenefit")
                        .HasForeignKey("IdBenefit")
                        .HasConstraintName("ContractBenefit_Benefit");

                    b.HasOne("HRMS_Identity.Models.Contract", "IdContractNavigation")
                        .WithMany("ContractBenefit")
                        .HasForeignKey("IdContract")
                        .HasConstraintName("ContractBenefit_Contract");
                });

            modelBuilder.Entity("HRMS_Identity.Models.Employee", b =>
                {
                    b.HasOne("HRMS_Identity.Models.Job", "IdJobNavigation")
                        .WithMany("Employee")
                        .HasForeignKey("IdJob")
                        .HasConstraintName("Employee_Job");

                    b.HasOne("HRMS_Identity.Models.Employee", "IdManagerNavigation")
                        .WithMany("InverseIdManagerNavigation")
                        .HasForeignKey("IdManager")
                        .HasConstraintName("Employee_Manager");

                    b.HasOne("HRMS_Identity.Models.Role", "IdRoleNavigation")
                        .WithMany("Employee")
                        .HasForeignKey("IdRole")
                        .HasConstraintName("Employee_Role");
                });

            modelBuilder.Entity("HRMS_Identity.Models.Overtime", b =>
                {
                    b.HasOne("HRMS_Identity.Models.Employee", "IdEmployeeNavigation")
                        .WithMany("Overtime")
                        .HasForeignKey("IdEmployee")
                        .HasConstraintName("Overtime_Employee");
                });

            modelBuilder.Entity("HRMS_Identity.Models.Request", b =>
                {
                    b.HasOne("HRMS_Identity.Models.Employee", "IdEmployeeNavigation")
                        .WithMany("Request")
                        .HasForeignKey("IdEmployee")
                        .HasConstraintName("Request_Employee");

                    b.HasOne("HRMS_Identity.Models.RequestStatus", "IdRequestStatusNavigation")
                        .WithMany("Request")
                        .HasForeignKey("IdRequestStatus")
                        .HasConstraintName("Request_Status");

                    b.HasOne("HRMS_Identity.Models.RequestType", "IdRequestTypeNavigation")
                        .WithMany("Request")
                        .HasForeignKey("IdRequestType")
                        .HasConstraintName("Request_RequestType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HRMS_Identity.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HRMS_Identity.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HRMS_Identity.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HRMS_Identity.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
